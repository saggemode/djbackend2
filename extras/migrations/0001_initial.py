# Generated by Django 5.2.1 on 2025-06-17 17:12

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(help_text='Geographic latitude coordinate', validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Latitude')),
                ('longitude', models.FloatField(help_text='Geographic longitude coordinate', validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Longitude')),
                ('address', models.CharField(help_text='Full address including street, city, state, and postal code', max_length=255, verbose_name='Address')),
                ('city', models.CharField(help_text='City name', max_length=100, verbose_name='City')),
                ('state', models.CharField(help_text='State or province name', max_length=100, verbose_name='State/Province')),
                ('postal_code', models.CharField(help_text='Postal or ZIP code', max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid postal code (e.g., 12345 or 12345-6789)', regex='^\\d{5}(-\\d{4})?$')], verbose_name='Postal Code')),
                ('country', models.CharField(default='United States', help_text='Country name', max_length=100, verbose_name='Country')),
                ('phone', models.CharField(help_text='Contact phone number', max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('additional_phone', models.CharField(blank=True, help_text='Alternative contact phone number', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Additional Phone')),
                ('address_type', models.CharField(choices=[('home', 'Home'), ('office', 'Office'), ('school', 'School'), ('market', 'Market'), ('other', 'Other'), ('business', 'Business'), ('mailing', 'Mailing')], default='home', help_text='Type of address (home, office, etc.)', max_length=10, verbose_name='Address Type')),
                ('is_default', models.BooleanField(default=False, help_text="Whether this is the user's default address", verbose_name='Default Address')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this address is currently active', verbose_name='Active')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this address has been verified', verbose_name='Verified')),
                ('verification_date', models.DateTimeField(blank=True, help_text='When this address was verified', null=True, verbose_name='Verification Date')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this address', null=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this address was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this address was last updated', verbose_name='Updated At')),
                ('user', models.ForeignKey(help_text='User who owns this address', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ['-is_default', '-created_at'],
                'indexes': [models.Index(fields=['user', 'is_default'], name='extras_addr_user_id_4e787b_idx'), models.Index(fields=['address_type'], name='extras_addr_address_f03c53_idx'), models.Index(fields=['is_active'], name='extras_addr_is_acti_4ab8f8_idx'), models.Index(fields=['is_verified'], name='extras_addr_is_veri_8c4948_idx')],
                'unique_together': {('user', 'address', 'address_type')},
            },
        ),
        migrations.CreateModel(
            name='UserVerification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user has been verified', verbose_name='Verified Status')),
                ('verification_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('2fa', 'Two-Factor Authentication'), ('biometric', 'Biometric'), ('security_questions', 'Security Questions'), ('document', 'Document Verification'), ('face', 'Face Recognition'), ('voice', 'Voice Verification')], default='email', help_text='Method used for verification', max_length=20, verbose_name='Verification Method')),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('verified', 'Verified'), ('failed', 'Failed'), ('expired', 'Expired'), ('blocked', 'Blocked')], default='pending', help_text='Current status of verification', max_length=20, verbose_name='Verification Status')),
                ('otp', models.CharField(default='', help_text='One-time password for verification', max_length=6, verbose_name='OTP')),
                ('otp_created_at', models.DateTimeField(auto_now_add=True, help_text='When the OTP was created', verbose_name='OTP Created At')),
                ('verification_attempts', models.PositiveIntegerField(default=0, help_text='Number of verification attempts made', verbose_name='Verification Attempts')),
                ('last_verification_attempt', models.DateTimeField(blank=True, help_text='When the last verification attempt was made', null=True, verbose_name='Last Verification Attempt')),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Maximum number of verification attempts allowed', verbose_name='Maximum Attempts')),
                ('is_blocked', models.BooleanField(default=False, help_text='Whether the user is blocked from verification attempts', verbose_name='Blocked')),
                ('blocked_until', models.DateTimeField(blank=True, help_text='When the user can attempt verification again', null=True, verbose_name='Blocked Until')),
                ('security_questions', models.JSONField(blank=True, help_text='Security questions and answers for verification', null=True, verbose_name='Security Questions')),
                ('document_verification', models.JSONField(blank=True, help_text='Document verification details', null=True, verbose_name='Document Verification')),
                ('biometric_data', models.JSONField(blank=True, help_text='Biometric verification data', null=True, verbose_name='Biometric Data')),
                ('verification_history', models.JSONField(default=list, help_text='History of verification attempts', verbose_name='Verification History')),
                ('user', models.ForeignKey(help_text='User being verified', on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Verification',
                'verbose_name_plural': 'User Verifications',
                'ordering': ['-otp_created_at'],
                'indexes': [models.Index(fields=['user', 'is_verified'], name='extras_user_user_id_0cb90c_idx'), models.Index(fields=['verification_method'], name='extras_user_verific_a885f1_idx'), models.Index(fields=['is_blocked'], name='extras_user_is_bloc_d07ed9_idx'), models.Index(fields=['verification_status'], name='extras_user_verific_fbffd8_idx')],
            },
        ),
    ]
